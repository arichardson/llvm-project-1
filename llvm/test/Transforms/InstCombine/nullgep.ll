; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --scrub-attributes
; Check that we can fold operations with (gep null) inputs.
; Note: the LLParser already does some constant folding, check that output first:
; RUN: opt -S -passes=verify < %s | FileCheck %s --allow-unused-prefixes --check-prefixes=ALL,LLPARSER
; We should be able to fold almost everything in InstSimplify other than the final test which requries InstCombine
; RUN: opt -S -passes=instsimplify < %s | FileCheck %s --allow-unused-prefixes --check-prefixes=ALL,CHECK,INTEGRAL-PTR,INTEGRAL-INSTSIMPLIFY
; RUN: opt -S -passes=instcombine < %s | FileCheck %s --allow-unused-prefixes --check-prefixes=ALL,CHECK,INTEGRAL-PTR,INTEGRAL-INSTCOMBINE
; Non-integral pointers limit certain transformations on pointers:
; RUN: sed -e 's/p:64:64:64:64/p:64:64:64:64-ni:1/g' %s | opt -S -passes=instcombine | \
; RUN:   FileCheck %s --allow-unused-prefixes --check-prefixes=ALL,CHECK,NONINTEGRAL-PTR
target datalayout = "p:64:64:64:64"

declare void @use_i64(i64)
declare void @use_ptr(i8 addrspace(1)*)

; Simple null constant folding:
define i8 addrspace(1)* @constant_fold_nullgep_zero() {
; ALL-LABEL: define {{[^@]+}}@constant_fold_nullgep_zero() {
; ALL-NEXT:    ret i8 addrspace(1)* null
;
  ret i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* null, i64 0)
}
define i32 addrspace(1)* @constant_fold_nullgep_i32_zero() {
; ALL-LABEL: define {{[^@]+}}@constant_fold_nullgep_i32_zero() {
; ALL-NEXT:    ret i32 addrspace(1)* null
;
  ret i32 addrspace(1)* getelementptr (i32, i32 addrspace(1)* null, i64 0)
}
define i8 addrspace(1)* @constant_fold_nullgep_inbounds_zero() {
; ALL-LABEL: define {{[^@]+}}@constant_fold_nullgep_inbounds_zero() {
; ALL-NEXT:    ret i8 addrspace(1)* null
;
  ret i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* null, i64 0)
}
define i32 addrspace(1)* @constant_fold_nullgep_i32_inbounds_zero() {
; ALL-LABEL: define {{[^@]+}}@constant_fold_nullgep_i32_inbounds_zero() {
; ALL-NEXT:    ret i32 addrspace(1)* null
;
  ret i32 addrspace(1)* getelementptr inbounds (i32, i32 addrspace(1)* null, i64 0)
}

; Note: For non-integral pointers a constant gep(null, x) can't be transformed to inttoptr(x)
define i8 addrspace(1)* @constant_fold_nullgep_nonzero() {
; LLPARSER-LABEL: define {{[^@]+}}@constant_fold_nullgep_nonzero() {
; LLPARSER-NEXT:    ret i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* null, i64 1234)
;
; INTEGRAL-INSTSIMPLIFY-LABEL: define {{[^@]+}}@constant_fold_nullgep_nonzero() {
; INTEGRAL-INSTSIMPLIFY-NEXT:    ret i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* null, i64 1234)
;
; INTEGRAL-INSTCOMBINE-LABEL: define {{[^@]+}}@constant_fold_nullgep_nonzero() {
; INTEGRAL-INSTCOMBINE-NEXT:    ret i8 addrspace(1)* inttoptr (i64 1234 to i8 addrspace(1)*)
;
; NONINTEGRAL-PTR-LABEL: define {{[^@]+}}@constant_fold_nullgep_nonzero() {
; NONINTEGRAL-PTR-NEXT:    ret i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* null, i64 1234)
;
  ret i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* null, i64 1234)
}
define i32 addrspace(1)* @constant_fold_nullgep_i32_nonzero() {
; LLPARSER-LABEL: define {{[^@]+}}@constant_fold_nullgep_i32_nonzero() {
; LLPARSER-NEXT:    ret i32 addrspace(1)* getelementptr (i32, i32 addrspace(1)* null, i64 1234)
;
; INTEGRAL-INSTSIMPLIFY-LABEL: define {{[^@]+}}@constant_fold_nullgep_i32_nonzero() {
; INTEGRAL-INSTSIMPLIFY-NEXT:    ret i32 addrspace(1)* getelementptr (i32, i32 addrspace(1)* null, i64 1234)
;
; INTEGRAL-INSTCOMBINE-LABEL: define {{[^@]+}}@constant_fold_nullgep_i32_nonzero() {
; INTEGRAL-INSTCOMBINE-NEXT:    ret i32 addrspace(1)* inttoptr (i64 4936 to i32 addrspace(1)*)
;
; NONINTEGRAL-PTR-LABEL: define {{[^@]+}}@constant_fold_nullgep_i32_nonzero() {
; NONINTEGRAL-PTR-NEXT:    ret i32 addrspace(1)* getelementptr (i32, i32 addrspace(1)* null, i64 1234)
;
  ret i32 addrspace(1)* getelementptr (i32, i32 addrspace(1)* null, i64 1234)
}
define i8 addrspace(1)* @constant_fold_nullgep_nonzero_inbounds() {
; LLPARSER-LABEL: define {{[^@]+}}@constant_fold_nullgep_nonzero_inbounds() {
; LLPARSER-NEXT:    ret i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* null, i64 1234)
;
; INTEGRAL-INSTSIMPLIFY-LABEL: define {{[^@]+}}@constant_fold_nullgep_nonzero_inbounds() {
; INTEGRAL-INSTSIMPLIFY-NEXT:    ret i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* null, i64 1234)
;
; INTEGRAL-INSTCOMBINE-LABEL: define {{[^@]+}}@constant_fold_nullgep_nonzero_inbounds() {
; INTEGRAL-INSTCOMBINE-NEXT:    ret i8 addrspace(1)* inttoptr (i64 1234 to i8 addrspace(1)*)
;
; NONINTEGRAL-PTR-LABEL: define {{[^@]+}}@constant_fold_nullgep_nonzero_inbounds() {
; NONINTEGRAL-PTR-NEXT:    ret i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* null, i64 1234)
;
  ret i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* null, i64 1234)
}
define i32 addrspace(1)* @constant_fold_nullgep_i32_nonzero_inbounds() {
; LLPARSER-LABEL: define {{[^@]+}}@constant_fold_nullgep_i32_nonzero_inbounds() {
; LLPARSER-NEXT:    ret i32 addrspace(1)* getelementptr inbounds (i32, i32 addrspace(1)* null, i64 1234)
;
; INTEGRAL-INSTSIMPLIFY-LABEL: define {{[^@]+}}@constant_fold_nullgep_i32_nonzero_inbounds() {
; INTEGRAL-INSTSIMPLIFY-NEXT:    ret i32 addrspace(1)* getelementptr inbounds (i32, i32 addrspace(1)* null, i64 1234)
;
; INTEGRAL-INSTCOMBINE-LABEL: define {{[^@]+}}@constant_fold_nullgep_i32_nonzero_inbounds() {
; INTEGRAL-INSTCOMBINE-NEXT:    ret i32 addrspace(1)* inttoptr (i64 4936 to i32 addrspace(1)*)
;
; NONINTEGRAL-PTR-LABEL: define {{[^@]+}}@constant_fold_nullgep_i32_nonzero_inbounds() {
; NONINTEGRAL-PTR-NEXT:    ret i32 addrspace(1)* getelementptr inbounds (i32, i32 addrspace(1)* null, i64 1234)
;
  ret i32 addrspace(1)* getelementptr inbounds (i32, i32 addrspace(1)* null, i64 1234)
}

; Variable inbounds GEPs on NULL can be folded to either null or poison:
; Any inbounds GEP with non-zero offset should be transformed to poison, and those with
; an unknown offset can be folded to zero since any other inputs would yield poison.
define i8 addrspace(1)* @fold_nullgep_nonzero_variable_inbounds(i64 %x) {
; ALL-LABEL: define {{[^@]+}}@fold_nullgep_nonzero_variable_inbounds
; ALL-SAME: (i64 [[X:%.*]]) {
; ALL-NEXT:    [[NONZERO:%.*]] = or i64 [[X]], 1
; ALL-NEXT:    [[PTR:%.*]] = getelementptr inbounds i8, i8 addrspace(1)* null, i64 [[NONZERO]]
; ALL-NEXT:    ret i8 addrspace(1)* [[PTR]]
;
  %nonzero = or i64 %x, 1
  %ptr = getelementptr inbounds i8, i8 addrspace(1)* null, i64 %nonzero
  ret i8 addrspace(1)* %ptr
}
define i8 addrspace(1)* @fold_nullgep_maybe_zero_variable_inbounds(i64 %x) {
; ALL-LABEL: define {{[^@]+}}@fold_nullgep_maybe_zero_variable_inbounds
; ALL-SAME: (i64 [[X:%.*]]) {
; ALL-NEXT:    [[PTR:%.*]] = getelementptr inbounds i8, i8 addrspace(1)* null, i64 [[X]]
; ALL-NEXT:    ret i8 addrspace(1)* [[PTR]]
;
  %ptr = getelementptr inbounds i8, i8 addrspace(1)* null, i64 %x
  ret i8 addrspace(1)* %ptr
}
define i8 addrspace(1)* @multi_index_gep_fold_maybe_zero(i64 %x, i64 %y) {
; ALL-LABEL: define {{[^@]+}}@multi_index_gep_fold_maybe_zero
; ALL-SAME: (i64 [[X:%.*]], i64 [[Y:%.*]]) {
; ALL-NEXT:    [[PTR:%.*]] = getelementptr inbounds [2 x i8], [2 x i8] addrspace(1)* null, i64 [[X]], i64 [[Y]]
; ALL-NEXT:    ret i8 addrspace(1)* [[PTR]]
;
  %ptr = getelementptr inbounds [2 x i8], [2 x i8] addrspace(1)* null, i64 %x, i64 %y
  ret i8 addrspace(1)* %ptr
}
define i8 addrspace(1)* @multi_index_gep_fold_nonzero_1(i64 %x, i64 %y) {
; ALL-LABEL: define {{[^@]+}}@multi_index_gep_fold_nonzero_1
; ALL-SAME: (i64 [[X:%.*]], i64 [[Y:%.*]]) {
; ALL-NEXT:    [[NONZERO:%.*]] = or i64 [[Y]], 1
; ALL-NEXT:    [[PTR:%.*]] = getelementptr inbounds [2 x i8], [2 x i8] addrspace(1)* null, i64 [[X]], i64 [[NONZERO]]
; ALL-NEXT:    ret i8 addrspace(1)* [[PTR]]
;
  %nonzero = or i64 %y, 1
  %ptr = getelementptr inbounds [2 x i8], [2 x i8] addrspace(1)* null, i64 %x, i64 %nonzero
  ret i8 addrspace(1)* %ptr
}
define i8 addrspace(1)* @multi_index_gep_fold_nonzero_2(i64 %x, i64 %y) {
; ALL-LABEL: define {{[^@]+}}@multi_index_gep_fold_nonzero_2
; ALL-SAME: (i64 [[X:%.*]], i64 [[Y:%.*]]) {
; ALL-NEXT:    [[NONZERO:%.*]] = or i64 [[Y]], 1
; ALL-NEXT:    [[PTR:%.*]] = getelementptr inbounds [2 x i8], [2 x i8] addrspace(1)* null, i64 [[NONZERO]], i64 [[X]]
; ALL-NEXT:    ret i8 addrspace(1)* [[PTR]]
;
  %nonzero = or i64 %y, 1
  %ptr = getelementptr inbounds [2 x i8], [2 x i8] addrspace(1)* null, i64 %nonzero, i64 %x
  ret i8 addrspace(1)* %ptr
}
define i8 addrspace(1)* @multi_index_gep_fold_nonzero_3(i64 %x, i64 %y) {
; ALL-LABEL: define {{[^@]+}}@multi_index_gep_fold_nonzero_3
; ALL-SAME: (i64 [[X:%.*]], i64 [[Y:%.*]]) {
; ALL-NEXT:    [[NONZERO:%.*]] = or i64 [[Y]], 1
; ALL-NEXT:    [[PTR:%.*]] = getelementptr inbounds [2 x i8], [2 x i8] addrspace(1)* null, i64 [[NONZERO]], i64 0
; ALL-NEXT:    ret i8 addrspace(1)* [[PTR]]
;
  %nonzero = or i64 %y, 1
  %ptr = getelementptr inbounds [2 x i8], [2 x i8] addrspace(1)* null, i64 %nonzero, i64 0
  ret i8 addrspace(1)* %ptr
}
define i8 addrspace(1)* @multi_index_gep_fold_nonzero_4(i64 %x, i64 %y) {
; ALL-LABEL: define {{[^@]+}}@multi_index_gep_fold_nonzero_4
; ALL-SAME: (i64 [[X:%.*]], i64 [[Y:%.*]]) {
; ALL-NEXT:    [[NONZERO:%.*]] = or i64 [[Y]], 1
; ALL-NEXT:    [[PTR:%.*]] = getelementptr inbounds [2 x i8], [2 x i8] addrspace(1)* null, i64 0, i64 [[NONZERO]]
; ALL-NEXT:    ret i8 addrspace(1)* [[PTR]]
;
  %nonzero = or i64 %y, 1
  %ptr = getelementptr inbounds [2 x i8], [2 x i8] addrspace(1)* null, i64 0, i64 %nonzero
  ret i8 addrspace(1)* %ptr
}

define void @constant_fold_gep_of_nullgep() {
  ; Check all combinations of inbounds+non-inbounds GEP with the outer GEP having a non-zero offset
; LLPARSER-LABEL: define {{[^@]+}}@constant_fold_gep_of_nullgep() {
; LLPARSER-NEXT:    call void @use_ptr(i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* null, i64 1234))
; LLPARSER-NEXT:    call void @use_ptr(i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* null, i64 1234))
; LLPARSER-NEXT:    call void @use_ptr(i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* null, i64 1234))
; LLPARSER-NEXT:    call void @use_ptr(i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* null, i64 1234))
; LLPARSER-NEXT:    call void @use_ptr(i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* null, i64 1234))
; LLPARSER-NEXT:    call void @use_ptr(i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* null, i64 1234))
; LLPARSER-NEXT:    call void @use_ptr(i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* null, i64 1234))
; LLPARSER-NEXT:    call void @use_ptr(i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* null, i64 1234))
; LLPARSER-NEXT:    call void @use_ptr(i8 addrspace(1)* null)
; LLPARSER-NEXT:    call void @use_ptr(i8 addrspace(1)* null)
; LLPARSER-NEXT:    call void @use_ptr(i8 addrspace(1)* null)
; LLPARSER-NEXT:    call void @use_ptr(i8 addrspace(1)* null)
; LLPARSER-NEXT:    ret void
;
; INTEGRAL-INSTSIMPLIFY-LABEL: define {{[^@]+}}@constant_fold_gep_of_nullgep() {
; INTEGRAL-INSTSIMPLIFY-NEXT:    call void @use_ptr(i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* null, i64 1234))
; INTEGRAL-INSTSIMPLIFY-NEXT:    call void @use_ptr(i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* null, i64 1234))
; INTEGRAL-INSTSIMPLIFY-NEXT:    call void @use_ptr(i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* null, i64 1234))
; INTEGRAL-INSTSIMPLIFY-NEXT:    call void @use_ptr(i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* null, i64 1234))
; INTEGRAL-INSTSIMPLIFY-NEXT:    call void @use_ptr(i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* null, i64 1234))
; INTEGRAL-INSTSIMPLIFY-NEXT:    call void @use_ptr(i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* null, i64 1234))
; INTEGRAL-INSTSIMPLIFY-NEXT:    call void @use_ptr(i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* null, i64 1234))
; INTEGRAL-INSTSIMPLIFY-NEXT:    call void @use_ptr(i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* null, i64 1234))
; INTEGRAL-INSTSIMPLIFY-NEXT:    call void @use_ptr(i8 addrspace(1)* null)
; INTEGRAL-INSTSIMPLIFY-NEXT:    call void @use_ptr(i8 addrspace(1)* null)
; INTEGRAL-INSTSIMPLIFY-NEXT:    call void @use_ptr(i8 addrspace(1)* null)
; INTEGRAL-INSTSIMPLIFY-NEXT:    call void @use_ptr(i8 addrspace(1)* null)
; INTEGRAL-INSTSIMPLIFY-NEXT:    ret void
;
; INTEGRAL-INSTCOMBINE-LABEL: define {{[^@]+}}@constant_fold_gep_of_nullgep() {
; INTEGRAL-INSTCOMBINE-NEXT:    call void @use_ptr(i8 addrspace(1)* nonnull inttoptr (i64 1234 to i8 addrspace(1)*))
; INTEGRAL-INSTCOMBINE-NEXT:    call void @use_ptr(i8 addrspace(1)* nonnull inttoptr (i64 1234 to i8 addrspace(1)*))
; INTEGRAL-INSTCOMBINE-NEXT:    call void @use_ptr(i8 addrspace(1)* nonnull inttoptr (i64 1234 to i8 addrspace(1)*))
; INTEGRAL-INSTCOMBINE-NEXT:    call void @use_ptr(i8 addrspace(1)* nonnull inttoptr (i64 1234 to i8 addrspace(1)*))
; INTEGRAL-INSTCOMBINE-NEXT:    call void @use_ptr(i8 addrspace(1)* nonnull inttoptr (i64 1234 to i8 addrspace(1)*))
; INTEGRAL-INSTCOMBINE-NEXT:    call void @use_ptr(i8 addrspace(1)* nonnull inttoptr (i64 1234 to i8 addrspace(1)*))
; INTEGRAL-INSTCOMBINE-NEXT:    call void @use_ptr(i8 addrspace(1)* nonnull inttoptr (i64 1234 to i8 addrspace(1)*))
; INTEGRAL-INSTCOMBINE-NEXT:    call void @use_ptr(i8 addrspace(1)* nonnull inttoptr (i64 1234 to i8 addrspace(1)*))
; INTEGRAL-INSTCOMBINE-NEXT:    call void @use_ptr(i8 addrspace(1)* null)
; INTEGRAL-INSTCOMBINE-NEXT:    call void @use_ptr(i8 addrspace(1)* null)
; INTEGRAL-INSTCOMBINE-NEXT:    call void @use_ptr(i8 addrspace(1)* null)
; INTEGRAL-INSTCOMBINE-NEXT:    call void @use_ptr(i8 addrspace(1)* null)
; INTEGRAL-INSTCOMBINE-NEXT:    ret void
;
; NONINTEGRAL-PTR-LABEL: define {{[^@]+}}@constant_fold_gep_of_nullgep() {
; NONINTEGRAL-PTR-NEXT:    call void @use_ptr(i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* null, i64 1234))
; NONINTEGRAL-PTR-NEXT:    call void @use_ptr(i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* null, i64 1234))
; NONINTEGRAL-PTR-NEXT:    call void @use_ptr(i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* null, i64 1234))
; NONINTEGRAL-PTR-NEXT:    call void @use_ptr(i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* null, i64 1234))
; NONINTEGRAL-PTR-NEXT:    call void @use_ptr(i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* null, i64 1234))
; NONINTEGRAL-PTR-NEXT:    call void @use_ptr(i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* null, i64 1234))
; NONINTEGRAL-PTR-NEXT:    call void @use_ptr(i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* null, i64 1234))
; NONINTEGRAL-PTR-NEXT:    call void @use_ptr(i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* null, i64 1234))
; NONINTEGRAL-PTR-NEXT:    call void @use_ptr(i8 addrspace(1)* null)
; NONINTEGRAL-PTR-NEXT:    call void @use_ptr(i8 addrspace(1)* null)
; NONINTEGRAL-PTR-NEXT:    call void @use_ptr(i8 addrspace(1)* null)
; NONINTEGRAL-PTR-NEXT:    call void @use_ptr(i8 addrspace(1)* null)
; NONINTEGRAL-PTR-NEXT:    ret void
;
  call void @use_ptr(i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* null, i64 0), i64 1234))
  call void @use_ptr(i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* null, i64 0), i64 1234))
  call void @use_ptr(i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* null, i64 0), i64 1234))
  call void @use_ptr(i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* null, i64 0), i64 1234))
  ; Same again but this time with the inner GEP using the non-zero offset
  call void @use_ptr(i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* null, i64 1234), i64 0))
  call void @use_ptr(i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* null, i64 1234), i64 0))
  call void @use_ptr(i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* null, i64 1234), i64 0))
  call void @use_ptr(i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* null, i64 1234), i64 0))
  ; And finally with two constants that sum to zero
  call void @use_ptr(i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* null, i64 -1), i64 1))
  call void @use_ptr(i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* null, i64 -1), i64 1))
  call void @use_ptr(i8 addrspace(1)* getelementptr inbounds (i8, i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* null, i64 -1), i64 1))
  call void @use_ptr(i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* getelementptr (i8, i8 addrspace(1)* null, i64 -1), i64 1))
  ret void
}
