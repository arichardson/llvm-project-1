; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --scrub-attributes
; Check that we can fold ptrtoint (gep (inttoptr ...)).
; We should be able to fold almost everything in InstSimplify other than the final test which requries InstCombine
; RUN: opt -S -passes=instsimplify < %s| FileCheck %s --allow-unused-prefixes --check-prefixes=ALL,INSTSIMPLIFY,INTEGRAL,INTEGRAL-INSTSIMPLIFY
; RUN: opt -S -passes=instcombine < %s | FileCheck %s --allow-unused-prefixes --check-prefixes=ALL,INSTCOMBINE,INTEGRAL,INTEGRAL-INSTCOMBINE
; RUN: sed -e 's/p:64:64:64:32/p:64:64:64:32-ni:1/g' %s | opt -S -passes=instsimplify | \
; RUN:  FileCheck %s --allow-unused-prefixes --check-prefixes=ALL,INSTSIMPLIFY,NONINTEGRAL,NONINTEGRAL-INSTSIMPLIFY
; RUN: sed -e 's/p:64:64:64:32/p:64:64:64:32-ni:1/g' %s | opt -S -passes=instcombine | \
; RUN:  FileCheck %s --allow-unused-prefixes --check-prefixes=ALL,INSTCOMBINE,NONINTEGRAL,NONINTEGRAL-INSTCOMBINE
target datalayout = "p:64:64:64:32"

declare void @use_i64(i64)
declare void @use_ptr(i8 addrspace(1)*)

; We use various integer sizes that don't match the pointer type
; and index size to ensure that we test the ext/trunc cases as well
; FIXME: we need to agree whether index width is equal to pointer address range
; or if the datalayout string needs another field for address range, i.e.
; "p:128:64:64:32:64" for a 128-bit pointer type with 64-bit address range and 32-bit GEP index.

define i128 @constant_fold_ptrtoint_of_gep_of_inttoptr_ext() {
; ALL-LABEL: define {{[^@]+}}@constant_fold_ptrtoint_of_gep_of_inttoptr_ext() {
; ALL-NEXT:    ret i128 18446744073709551615
;
  %x = inttoptr i16 65535 to i8 addrspace(1)*
  %y = getelementptr i8, i8 addrspace(1)* %x, i128 -65537
  %z = getelementptr i8, i8 addrspace(1)* %y, i256 1
  %result = ptrtoint i8 addrspace(1)* %z to i128
  ret i128 %result
}

; The resulting pointer value should be 65537 but since the ptrtoint
; result is i16 only one of the low bits is set -> ret i16 1
define i16 @constant_fold_ptrtoint_of_gep_of_inttoptr_trunc() {
; ALL-LABEL: define {{[^@]+}}@constant_fold_ptrtoint_of_gep_of_inttoptr_trunc() {
; ALL-NEXT:    ret i16 1
;
  %x = inttoptr i128 65539 to i8 addrspace(1)*
  %y = getelementptr i8, i8 addrspace(1)* %x, i256 -1
  %z = getelementptr i8, i8 addrspace(1)* %y, i64 -1
  %result = ptrtoint i8 addrspace(1)* %z to i16
  ret i16 %result
}

; Same tests again with variables instead of constants:
define i128 @fold_ptrtoint_of_gep_of_inttoptr_ext(i16 %arg) {
; INSTSIMPLIFY-LABEL: define {{[^@]+}}@fold_ptrtoint_of_gep_of_inttoptr_ext
; INSTSIMPLIFY-SAME: (i16 [[ARG:%.*]]) {
; INSTSIMPLIFY-NEXT:    [[X:%.*]] = inttoptr i16 [[ARG]] to i8 addrspace(1)*
; INSTSIMPLIFY-NEXT:    [[Y:%.*]] = getelementptr i8, i8 addrspace(1)* [[X]], i128 -65537
; INSTSIMPLIFY-NEXT:    [[Z:%.*]] = getelementptr i8, i8 addrspace(1)* [[Y]], i256 1
; INSTSIMPLIFY-NEXT:    [[RESULT:%.*]] = ptrtoint i8 addrspace(1)* [[Z]] to i128
; INSTSIMPLIFY-NEXT:    ret i128 [[RESULT]]
;
; INSTCOMBINE-LABEL: define {{[^@]+}}@fold_ptrtoint_of_gep_of_inttoptr_ext
; INSTCOMBINE-SAME: (i16 [[ARG:%.*]]) {
; INSTCOMBINE-NEXT:    [[TMP1:%.*]] = zext i16 [[ARG]] to i64
; INSTCOMBINE-NEXT:    [[TMP2:%.*]] = or i64 [[TMP1]], 4294901760
; INSTCOMBINE-NEXT:    [[RESULT:%.*]] = zext i64 [[TMP2]] to i128
; INSTCOMBINE-NEXT:    ret i128 [[RESULT]]
;
  %x = inttoptr i16 %arg to i8 addrspace(1)*
  %y = getelementptr i8, i8 addrspace(1)* %x, i128 -65537
  %z = getelementptr i8, i8 addrspace(1)* %y, i256 1
  %result = ptrtoint i8 addrspace(1)* %z to i128
  ret i128 %result
}

define i16 @fold_ptrtoint_of_gep_of_inttoptr_trunc(i128 %arg) {
; INSTSIMPLIFY-LABEL: define {{[^@]+}}@fold_ptrtoint_of_gep_of_inttoptr_trunc
; INSTSIMPLIFY-SAME: (i128 [[ARG:%.*]]) {
; INSTSIMPLIFY-NEXT:    [[X:%.*]] = inttoptr i128 [[ARG]] to i8 addrspace(1)*
; INSTSIMPLIFY-NEXT:    [[Y:%.*]] = getelementptr i8, i8 addrspace(1)* [[X]], i256 -1
; INSTSIMPLIFY-NEXT:    [[Z:%.*]] = getelementptr i8, i8 addrspace(1)* [[Y]], i128 -1
; INSTSIMPLIFY-NEXT:    [[RESULT:%.*]] = ptrtoint i8 addrspace(1)* [[Z]] to i16
; INSTSIMPLIFY-NEXT:    ret i16 [[RESULT]]
;
; INSTCOMBINE-LABEL: define {{[^@]+}}@fold_ptrtoint_of_gep_of_inttoptr_trunc
; INSTCOMBINE-SAME: (i128 [[ARG:%.*]]) {
; INSTCOMBINE-NEXT:    [[TMP1:%.*]] = trunc i128 [[ARG]] to i16
; INSTCOMBINE-NEXT:    [[TMP2:%.*]] = add i16 [[TMP1]], -2
; INSTCOMBINE-NEXT:    ret i16 [[TMP2]]
;
  %x = inttoptr i128 %arg to i8 addrspace(1)*
  %y = getelementptr i8, i8 addrspace(1)* %x, i256 -1
  %z = getelementptr i8, i8 addrspace(1)* %y, i128 -1
  %result = ptrtoint i8 addrspace(1)* %z to i16
  ret i16 %result
}

; Basic ptrtoint inttoptr checks
define i128 @fold_ptrtoint_of_inttoptr_ext(i16 %arg) {
; INSTSIMPLIFY-LABEL: define {{[^@]+}}@fold_ptrtoint_of_inttoptr_ext
; INSTSIMPLIFY-SAME: (i16 [[ARG:%.*]]) {
; INSTSIMPLIFY-NEXT:    [[X:%.*]] = inttoptr i16 [[ARG]] to i8 addrspace(1)*
; INSTSIMPLIFY-NEXT:    [[RESULT:%.*]] = ptrtoint i8 addrspace(1)* [[X]] to i128
; INSTSIMPLIFY-NEXT:    ret i128 [[RESULT]]
;
; INSTCOMBINE-LABEL: define {{[^@]+}}@fold_ptrtoint_of_inttoptr_ext
; INSTCOMBINE-SAME: (i16 [[ARG:%.*]]) {
; INSTCOMBINE-NEXT:    [[RESULT:%.*]] = zext i16 [[ARG]] to i128
; INSTCOMBINE-NEXT:    ret i128 [[RESULT]]
;
  %x = inttoptr i16 %arg to i8 addrspace(1)*
  %result = ptrtoint i8 addrspace(1)* %x to i128
  ret i128 %result
}

define i16 @fold_ptrtoint_of_inttoptr_trunc(i128 %arg) {
; INSTSIMPLIFY-LABEL: define {{[^@]+}}@fold_ptrtoint_of_inttoptr_trunc
; INSTSIMPLIFY-SAME: (i128 [[ARG:%.*]]) {
; INSTSIMPLIFY-NEXT:    [[X:%.*]] = inttoptr i128 [[ARG]] to i8 addrspace(1)*
; INSTSIMPLIFY-NEXT:    [[RESULT:%.*]] = ptrtoint i8 addrspace(1)* [[X]] to i16
; INSTSIMPLIFY-NEXT:    ret i16 [[RESULT]]
;
; INSTCOMBINE-LABEL: define {{[^@]+}}@fold_ptrtoint_of_inttoptr_trunc
; INSTCOMBINE-SAME: (i128 [[ARG:%.*]]) {
; INSTCOMBINE-NEXT:    [[RESULT:%.*]] = trunc i128 [[ARG]] to i16
; INSTCOMBINE-NEXT:    ret i16 [[RESULT]]
;
  %x = inttoptr i128 %arg to i8 addrspace(1)*
  %result = ptrtoint i8 addrspace(1)* %x to i16
  ret i16 %result
}


define i128 @fold_variable_ptrtoint_of_gep_of_inttoptr_ext(i16 %arg, i128 %idx1, i256 %idx2) {
; INSTSIMPLIFY-LABEL: define {{[^@]+}}@fold_ptrtoint_of_gep_of_inttoptr_ext
  %x = inttoptr i16 %arg to i8 addrspace(1)*
  %y = getelementptr i8, i8 addrspace(1)* %x, i128 %idx1
  %z = getelementptr i8, i8 addrspace(1)* %y, i256 %idx2
  %result = ptrtoint i8 addrspace(1)* %z to i128
  ret i128 %result
}

define i16 @fold_variable_ptrtoint_of_gep_of_inttoptr_trunc(i128 %arg, i256 %idx1, i128 %idx2) {
  %x = inttoptr i128 %arg to i8 addrspace(1)*
  %y = getelementptr i8, i8 addrspace(1)* %x, i256 %idx1
  %z = getelementptr i8, i8 addrspace(1)* %y, i128 %idx2
  %result = ptrtoint i8 addrspace(1)* %z to i16
  ret i16 %result
}